// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Profile {
  id              String    @id
  email           String?   @unique
  name            String?
  accessExpiresAt DateTime?

  attempts UserAttempt[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  groupId String?
  group   Group?  @relation(fields: [groupId], references: [id])

  @@index([groupId])
}

model UserAttempt {
  id String @id @default(cuid())

  userAnswers Json

  evaluatedAt DateTime?

  caseStudyId String

  // Relaci√≥n con el usuario que hizo el intento
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  profileId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId, caseStudyId, evaluatedAt])
}

model Video {
  id          String   @id @default(cuid())
  title       String
  description String?
  youtubeId   String   @unique
  groupId     String
  group       Group    @relation(fields: [groupId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([groupId])
}

// --- NUEVO MODELO ---
model Group {
  id   String @id @default(cuid())
  name String @unique

  // Relaciones
  profiles Profile[]
  videos   Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
